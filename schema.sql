-- Schema for a basic Supabase-backed icon search logging table
-- Run this in your Supabase project's SQL editor to create the table from scratch.

-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create profiles table to store user metadata from OAuth providers and email signups
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  email TEXT,
  full_name TEXT,
  avatar_url TEXT,
  provider TEXT, -- 'google', 'github', 'email', etc.
  provider_id TEXT, -- The ID from the OAuth provider
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS for profiles
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Create policies for profiles
CREATE POLICY "Users can view own profile" ON public.profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);
CREATE POLICY "Users can insert own profile" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

CREATE TABLE IF NOT EXISTS public.searches (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  query text NOT NULL,
  library text NOT NULL,
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
  searched_at timestamptz NOT NULL DEFAULT now()
);

-- Optional: table to store favourite icons or search results
CREATE TABLE IF NOT EXISTS public.favourites (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  icon_id text NOT NULL,
  library text NOT NULL,
  added_at timestamptz NOT NULL DEFAULT now()
);

-- Generated icons storage
CREATE TABLE IF NOT EXISTS public.generated_icons (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  deterministic_id text NOT NULL, -- sha256(icon_name|image_url) for idempotency
  icon_name text NOT NULL,
  subject text NOT NULL,
  context text NOT NULL,
  style text NOT NULL,
  colors text NOT NULL,
  background text NOT NULL,
  image_url text NOT NULL,
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT generated_icons_deterministic_id_unique UNIQUE (deterministic_id)
);

-- Helpful indexes
CREATE INDEX IF NOT EXISTS generated_icons_created_at_idx ON public.generated_icons (created_at DESC);
CREATE INDEX IF NOT EXISTS generated_icons_subject_idx ON public.generated_icons (subject);
CREATE INDEX IF NOT EXISTS generated_icons_context_idx ON public.generated_icons (context);
CREATE INDEX IF NOT EXISTS generated_icons_style_idx ON public.generated_icons (style);
CREATE INDEX IF NOT EXISTS generated_icons_colors_idx ON public.generated_icons (colors);
CREATE INDEX IF NOT EXISTS generated_icons_background_idx ON public.generated_icons (background);

-- View reflecting current schema (context appended last to avoid rename issues)
CREATE OR REPLACE VIEW public.generated_icons_view AS
SELECT id, deterministic_id, icon_name, subject, style, colors, background, image_url, user_id, created_at, context
FROM public.generated_icons;

-- Add user profile handling functions and triggers
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (
    id,
    email,
    full_name,
    avatar_url,
    provider,
    provider_id
  ) VALUES (
    NEW.id,
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'name'),
    COALESCE(NEW.raw_user_meta_data->>'avatar_url', NEW.raw_user_meta_data->>'picture'),
    COALESCE(NEW.raw_app_meta_data->>'provider', 'email'),
    NEW.raw_user_meta_data->>'provider_id'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger to automatically create profile on user signup
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Update function to handle profile updates
CREATE OR REPLACE FUNCTION public.handle_user_update()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE public.profiles SET
    email = NEW.email,
    full_name = COALESCE(NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'name', full_name),
    avatar_url = COALESCE(NEW.raw_user_meta_data->>'avatar_url', NEW.raw_user_meta_data->>'picture', avatar_url),
    updated_at = NOW()
  WHERE id = NEW.id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger to automatically update profile when user data changes
DROP TRIGGER IF EXISTS on_auth_user_updated ON auth.users;
CREATE TRIGGER on_auth_user_updated
  AFTER UPDATE ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_user_update();

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_profiles_provider ON public.profiles(provider);
CREATE INDEX IF NOT EXISTS idx_profiles_provider_id ON public.profiles(provider_id);
CREATE INDEX IF NOT EXISTS idx_profiles_email ON public.profiles(email);

-- RLS - TEMPORARILY DISABLED FOR TESTING
-- ALTER TABLE public.generated_icons ENABLE ROW LEVEL SECURITY;

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'generated_icons' AND policyname = 'Allow read to all'
  ) THEN
    CREATE POLICY "Allow read to all" ON public.generated_icons FOR SELECT USING (true);
  END IF;
END $$;

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'generated_icons' AND policyname = 'Allow insert to anon'
  ) THEN
    CREATE POLICY "Allow insert to anon" ON public.generated_icons FOR INSERT WITH CHECK (true);
  END IF;
END $$;

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'generated_icons' AND policyname = 'Allow update on conflict'
  ) THEN
    CREATE POLICY "Allow update on conflict" ON public.generated_icons FOR UPDATE USING (true) WITH CHECK (true);
  END IF;
END $$;