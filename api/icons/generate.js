// POST /api/icons/generate - Generate custom icons using AI
const axios = require('axios');
const { requireApiKey, sendError, sendSuccess, supabase } = require('../_utils');

const RUNWARE_API_KEY = process.env.RUNWARE_API_KEY || '';

// SVG conversion utility (simplified for serverless)
function convertToSvg(imageUrl, width, height) {
  // For now, return a placeholder SVG that references the image
  // In a full implementation, you'd use a service like CloudConvert or similar
  return `<svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}" viewBox="0 0 ${width} ${height}">
  <image href="${imageUrl}" width="${width}" height="${height}"/>
</svg>`;
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return sendError(res, 405, 'Method not allowed');
  }

  // Require API key authentication
  const auth = await requireApiKey(req, res, 'generate');
  if (!auth) return; // Error already sent

  if (!RUNWARE_API_KEY) {
    return sendError(res, 500, 'Server not configured: RUNWARE_API_KEY missing');
  }

  try {
    const { 
      subject, 
      context = '', 
      style = 'outline', 
      colors = 'black and white', 
      background = 'white' 
    } = req.body;

    if (!subject || typeof subject !== 'string' || subject.trim().length === 0) {
      return sendError(res, 400, 'Subject parameter is required and must be a non-empty string');
    }

    console.log('üé® Starting icon generation...');

    // Build the prompt
    const promptParts = [
      `Design a simple, flat, minimalist icon of a ${subject.trim()}`,
      context ? `for ${context}` : '',
      `${style} style`,
      colors ? `using ${colors} colors` : '',
      background ? `on ${background} background` : '',
      'high quality, professional, clean lines, suitable for UI/UX, vector-style, no text, centered composition'
    ].filter(Boolean);

    const prompt = promptParts.join(' ');
    console.log(`üìù Generated prompt: ${prompt}`);

    // Generate UUID for tracking
    const taskUUID = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    console.log(`üÜî Task UUID: ${taskUUID}`);

    // Call Runware API
    console.log('üöÄ Sending generation request to Runware API...');
    const runwarePayload = {
      taskType: 'imageInference',
      taskUUID: taskUUID,
      prompt: prompt,
      height: 1024,
      width: 1024,
      numberResults: 1,
      model: 'runware:100@1',
      steps: 20,
      CFGScale: 7,
      seed: Math.floor(Math.random() * 1000000),
      onlyUpscale: false,
      useCache: true
    };

    const runwareResponse = await axios.post('https://api.runware.ai/v1', runwarePayload, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${RUNWARE_API_KEY}`
      },
      timeout: 30000
    });

    console.log(`üì° Received response from Runware API (status: ${runwareResponse.status})`);

    if (!runwareResponse.data || !runwareResponse.data.data || runwareResponse.data.data.length === 0) {
      return sendError(res, 502, 'No image generated by AI service', { taskUUID });
    }

    const generatedImage = runwareResponse.data.data[0];
    console.log(`‚úÖ Image generated successfully: ${generatedImage.imageURL}`);

    // Convert to SVG (simplified)
    console.log('üîÑ Converting to SVG format...');
    const svgContent = convertToSvg(generatedImage.imageURL, 1024, 1024);
    console.log(`‚úÖ Successfully converted to SVG (${svgContent.length} bytes)`);

    // Store in database if configured
    if (supabase) {
      try {
        const iconRecord = {
          deterministic_id: `${subject}_${Date.now()}`,
          icon_name: `Generated ${subject} icon`,
          subject: subject.trim(),
          context: context || '',
          style: style,
          colors: colors,
          background: background,
          image_url: generatedImage.imageURL,
          custom_id: taskUUID
        };

        await supabase
          .from('generated_icons')
          .insert(iconRecord);
      } catch (dbError) {
        console.warn('Failed to store icon in database:', dbError);
        // Continue without failing the request
      }
    }

    console.log('üéâ Icon generation completed successfully!');

    const response = {
      success: true,
      prompt: prompt,
      parameters: {
        subject: subject.trim(),
        context: context || null,
        style: style,
        colors: colors,
        background: background
      },
      icon: {
        id: `generated-${taskUUID}`,
        name: `Generated ${subject} icon`,
        type: 'generated',
        imageUrl: generatedImage.imageURL,
        svg: svgContent,
        width: 1024,
        height: 1024,
        format: 'svg'
      },
      taskUUID: taskUUID
    };

    sendSuccess(res, response);

  } catch (error) {
    console.error('Icon generation error:', error);
    
    if (error.code === 'ECONNABORTED' || error.code === 'ETIMEDOUT') {
      return sendError(res, 504, 'Generation request timed out');
    }
    
    if (error.response) {
      console.error('Runware API error:', error.response.data);
      return sendError(res, 502, 'AI service error', {
        status: error.response.status,
        message: error.response.data?.message || error.response.statusText
      });
    }
    
    return sendError(res, 500, 'Internal server error during icon generation');
  }
}